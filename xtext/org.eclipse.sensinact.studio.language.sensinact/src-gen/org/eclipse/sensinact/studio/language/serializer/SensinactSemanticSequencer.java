/**
 * Copyright (c) 2017 CEA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *     CEA - initial API and implementation and/or initial documentation
 */
/*
 * generated by Xtext 2.9.1
 */
package org.eclipse.sensinact.studio.language.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_AFTER;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_AVG;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_BEFORE;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_COINCIDE;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_COUNT;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_DURATION;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_DURATION_MIN;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_DURATION_SEC;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_MAX;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_MIN;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_STATEMENT;
import org.eclipse.sensinact.studio.language.sensinact.DSL_CEP_SUM;
import org.eclipse.sensinact.studio.language.sensinact.DSL_ECA_STATEMENT;
import org.eclipse.sensinact.studio.language.sensinact.DSL_ElseDo;
import org.eclipse.sensinact.studio.language.sensinact.DSL_ElseIfDo;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_And;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Diff;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Division;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Equal;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Larger;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Larger_Equal;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Minus;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Modulo;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Multiplication;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Negate;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Or;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Plus;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Smaller;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Expression_Smaller_Equal;
import org.eclipse.sensinact.studio.language.sensinact.DSL_IfDo;
import org.eclipse.sensinact.studio.language.sensinact.DSL_ListActions;
import org.eclipse.sensinact.studio.language.sensinact.DSL_ListParam;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Object_Boolean;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Object_Number;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Object_Ref;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Object_String;
import org.eclipse.sensinact.studio.language.sensinact.DSL_On;
import org.eclipse.sensinact.studio.language.sensinact.DSL_REF_CONDITION;
import org.eclipse.sensinact.studio.language.sensinact.DSL_Resource;
import org.eclipse.sensinact.studio.language.sensinact.DSL_ResourceAction;
import org.eclipse.sensinact.studio.language.sensinact.DSL_SENSINACT;
import org.eclipse.sensinact.studio.language.sensinact.Sensinact;
import org.eclipse.sensinact.studio.language.sensinact.SensinactPackage;
import org.eclipse.sensinact.studio.language.services.SensinactGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SensinactSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SensinactGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SensinactPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SensinactPackage.DSL_CEP_AFTER:
				sequence_DSL_CEP_AFTER(context, (DSL_CEP_AFTER) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_AVG:
				sequence_DSL_CEP_AVG(context, (DSL_CEP_AVG) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_BEFORE:
				sequence_DSL_CEP_BEFORE(context, (DSL_CEP_BEFORE) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_COINCIDE:
				sequence_DSL_CEP_COINCIDE(context, (DSL_CEP_COINCIDE) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_COUNT:
				sequence_DSL_CEP_COUNT(context, (DSL_CEP_COUNT) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_DURATION:
				sequence_DSL_CEP_DURATION(context, (DSL_CEP_DURATION) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_DURATION_MIN:
				sequence_DSL_CEP_DURATION_MIN(context, (DSL_CEP_DURATION_MIN) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_DURATION_SEC:
				sequence_DSL_CEP_DURATION_SEC(context, (DSL_CEP_DURATION_SEC) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_MAX:
				sequence_DSL_CEP_MAX(context, (DSL_CEP_MAX) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_MIN:
				sequence_DSL_CEP_MIN(context, (DSL_CEP_MIN) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_STATEMENT:
				sequence_DSL_CEP_STATEMENT(context, (DSL_CEP_STATEMENT) semanticObject); 
				return; 
			case SensinactPackage.DSL_CEP_SUM:
				sequence_DSL_CEP_SUM(context, (DSL_CEP_SUM) semanticObject); 
				return; 
			case SensinactPackage.DSL_ECA_STATEMENT:
				sequence_DSL_ECA_STATEMENT(context, (DSL_ECA_STATEMENT) semanticObject); 
				return; 
			case SensinactPackage.DSL_ELSE_DO:
				sequence_DSL_ElseDo(context, (DSL_ElseDo) semanticObject); 
				return; 
			case SensinactPackage.DSL_ELSE_IF_DO:
				sequence_DSL_ElseIfDo(context, (DSL_ElseIfDo) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_AND:
				sequence_DSL_Expression_And(context, (DSL_Expression_And) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_DIFF:
				sequence_DSL_Expression_DiffEqual(context, (DSL_Expression_Diff) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_DIVISION:
				sequence_DSL_Expression_MultiplicationDivision(context, (DSL_Expression_Division) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_EQUAL:
				sequence_DSL_Expression_DiffEqual(context, (DSL_Expression_Equal) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_LARGER:
				sequence_DSL_Expression_Compare(context, (DSL_Expression_Larger) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_LARGER_EQUAL:
				sequence_DSL_Expression_Compare(context, (DSL_Expression_Larger_Equal) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_MINUS:
				sequence_DSL_Expression_PlusMinus(context, (DSL_Expression_Minus) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_MODULO:
				sequence_DSL_Expression_MultiplicationDivision(context, (DSL_Expression_Modulo) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_MULTIPLICATION:
				sequence_DSL_Expression_MultiplicationDivision(context, (DSL_Expression_Multiplication) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_NEGATE:
				sequence_DSL_Expression_Unary(context, (DSL_Expression_Negate) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_OR:
				sequence_DSL_Expression_Or(context, (DSL_Expression_Or) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_PLUS:
				sequence_DSL_Expression_PlusMinus(context, (DSL_Expression_Plus) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_SMALLER:
				sequence_DSL_Expression_Compare(context, (DSL_Expression_Smaller) semanticObject); 
				return; 
			case SensinactPackage.DSL_EXPRESSION_SMALLER_EQUAL:
				sequence_DSL_Expression_Compare(context, (DSL_Expression_Smaller_Equal) semanticObject); 
				return; 
			case SensinactPackage.DSL_IF_DO:
				sequence_DSL_IfDo(context, (DSL_IfDo) semanticObject); 
				return; 
			case SensinactPackage.DSL_LIST_ACTIONS:
				sequence_DSL_ListActions(context, (DSL_ListActions) semanticObject); 
				return; 
			case SensinactPackage.DSL_LIST_PARAM:
				sequence_DSL_ListParam(context, (DSL_ListParam) semanticObject); 
				return; 
			case SensinactPackage.DSL_OBJECT_BOOLEAN:
				sequence_DSL_Expression_Unary(context, (DSL_Object_Boolean) semanticObject); 
				return; 
			case SensinactPackage.DSL_OBJECT_NUMBER:
				sequence_DSL_Expression_Unary(context, (DSL_Object_Number) semanticObject); 
				return; 
			case SensinactPackage.DSL_OBJECT_REF:
				sequence_DSL_Expression_Unary(context, (DSL_Object_Ref) semanticObject); 
				return; 
			case SensinactPackage.DSL_OBJECT_STRING:
				sequence_DSL_Expression_Unary(context, (DSL_Object_String) semanticObject); 
				return; 
			case SensinactPackage.DSL_ON:
				sequence_DSL_On(context, (DSL_On) semanticObject); 
				return; 
			case SensinactPackage.DSL_REF_CONDITION:
				sequence_DSL_REF_CONDITION(context, (DSL_REF_CONDITION) semanticObject); 
				return; 
			case SensinactPackage.DSL_RESOURCE:
				sequence_DSL_Resource(context, (DSL_Resource) semanticObject); 
				return; 
			case SensinactPackage.DSL_RESOURCE_ACTION:
				sequence_DSL_ResourceAction(context, (DSL_ResourceAction) semanticObject); 
				return; 
			case SensinactPackage.DSL_SENSINACT:
				sequence_DSL_SENSINACT(context, (DSL_SENSINACT) semanticObject); 
				return; 
			case SensinactPackage.SENSINACT:
				sequence_Sensinact(context, (Sensinact) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DSL_CEP_AFTER returns DSL_CEP_AFTER
	 *
	 * Constraint:
	 *     (ref1=DSL_REF_CONDITION ref2=DSL_REF_CONDITION start=DSL_CEP_DURATION? end=DSL_CEP_DURATION)
	 */
	protected void sequence_DSL_CEP_AFTER(ISerializationContext context, DSL_CEP_AFTER semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_AVG returns DSL_CEP_AVG
	 *
	 * Constraint:
	 *     (ref=DSL_REF_CONDITION window=DSL_CEP_DURATION)
	 */
	protected void sequence_DSL_CEP_AVG(ISerializationContext context, DSL_CEP_AVG semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_AVG__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_AVG__REF));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_AVG__WINDOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_AVG__WINDOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_CEP_AVGAccess().getRefDSL_REF_CONDITIONParserRuleCall_2_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getDSL_CEP_AVGAccess().getWindowDSL_CEP_DURATIONParserRuleCall_4_0(), semanticObject.getWindow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_BEFORE returns DSL_CEP_BEFORE
	 *
	 * Constraint:
	 *     (ref1=DSL_REF_CONDITION ref2=DSL_REF_CONDITION start=DSL_CEP_DURATION? end=DSL_CEP_DURATION)
	 */
	protected void sequence_DSL_CEP_BEFORE(ISerializationContext context, DSL_CEP_BEFORE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_COINCIDE returns DSL_CEP_COINCIDE
	 *
	 * Constraint:
	 *     (ref1=DSL_REF_CONDITION ref2=DSL_REF_CONDITION window=DSL_CEP_DURATION)
	 */
	protected void sequence_DSL_CEP_COINCIDE(ISerializationContext context, DSL_CEP_COINCIDE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_COINCIDE__REF1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_COINCIDE__REF1));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_COINCIDE__REF2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_COINCIDE__REF2));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_COINCIDE__WINDOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_COINCIDE__WINDOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_CEP_COINCIDEAccess().getRef1DSL_REF_CONDITIONParserRuleCall_2_0(), semanticObject.getRef1());
		feeder.accept(grammarAccess.getDSL_CEP_COINCIDEAccess().getRef2DSL_REF_CONDITIONParserRuleCall_4_0(), semanticObject.getRef2());
		feeder.accept(grammarAccess.getDSL_CEP_COINCIDEAccess().getWindowDSL_CEP_DURATIONParserRuleCall_6_0(), semanticObject.getWindow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_COUNT returns DSL_CEP_COUNT
	 *
	 * Constraint:
	 *     (ref=DSL_REF_CONDITION window=DSL_CEP_DURATION)
	 */
	protected void sequence_DSL_CEP_COUNT(ISerializationContext context, DSL_CEP_COUNT semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_COUNT__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_COUNT__REF));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_COUNT__WINDOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_COUNT__WINDOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_CEP_COUNTAccess().getRefDSL_REF_CONDITIONParserRuleCall_2_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getDSL_CEP_COUNTAccess().getWindowDSL_CEP_DURATIONParserRuleCall_4_0(), semanticObject.getWindow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_DURATION returns DSL_CEP_DURATION
	 *
	 * Constraint:
	 *     (units+=DSL_CEP_DURATION_MIN | units+=DSL_CEP_DURATION_SEC)+
	 */
	protected void sequence_DSL_CEP_DURATION(ISerializationContext context, DSL_CEP_DURATION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_DURATION_MIN returns DSL_CEP_DURATION_MIN
	 *
	 * Constraint:
	 *     min=NUMBER
	 */
	protected void sequence_DSL_CEP_DURATION_MIN(ISerializationContext context, DSL_CEP_DURATION_MIN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_DURATION_MIN__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_DURATION_MIN__MIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_CEP_DURATION_MINAccess().getMinNUMBERParserRuleCall_0_0(), semanticObject.getMin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_DURATION_SEC returns DSL_CEP_DURATION_SEC
	 *
	 * Constraint:
	 *     sec=NUMBER
	 */
	protected void sequence_DSL_CEP_DURATION_SEC(ISerializationContext context, DSL_CEP_DURATION_SEC semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_DURATION_SEC__SEC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_DURATION_SEC__SEC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_CEP_DURATION_SECAccess().getSecNUMBERParserRuleCall_0_0(), semanticObject.getSec());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_MAX returns DSL_CEP_MAX
	 *
	 * Constraint:
	 *     (ref=DSL_REF_CONDITION window=DSL_CEP_DURATION)
	 */
	protected void sequence_DSL_CEP_MAX(ISerializationContext context, DSL_CEP_MAX semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_MAX__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_MAX__REF));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_MAX__WINDOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_MAX__WINDOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_CEP_MAXAccess().getRefDSL_REF_CONDITIONParserRuleCall_2_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getDSL_CEP_MAXAccess().getWindowDSL_CEP_DURATIONParserRuleCall_4_0(), semanticObject.getWindow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_MIN returns DSL_CEP_MIN
	 *
	 * Constraint:
	 *     (ref=DSL_REF_CONDITION window=DSL_CEP_DURATION)
	 */
	protected void sequence_DSL_CEP_MIN(ISerializationContext context, DSL_CEP_MIN semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_MIN__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_MIN__REF));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_MIN__WINDOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_MIN__WINDOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_CEP_MINAccess().getRefDSL_REF_CONDITIONParserRuleCall_2_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getDSL_CEP_MINAccess().getWindowDSL_CEP_DURATIONParserRuleCall_4_0(), semanticObject.getWindow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_REF returns DSL_CEP_STATEMENT
	 *     DSL_CEP_STATEMENT returns DSL_CEP_STATEMENT
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (
	 *             operation=DSL_CEP_AFTER | 
	 *             operation=DSL_CEP_BEFORE | 
	 *             operation=DSL_CEP_COINCIDE | 
	 *             operation=DSL_CEP_MIN | 
	 *             operation=DSL_CEP_MAX | 
	 *             operation=DSL_CEP_AVG | 
	 *             operation=DSL_CEP_SUM | 
	 *             operation=DSL_CEP_COUNT
	 *         )
	 *     )
	 */
	protected void sequence_DSL_CEP_STATEMENT(ISerializationContext context, DSL_CEP_STATEMENT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_CEP_SUM returns DSL_CEP_SUM
	 *
	 * Constraint:
	 *     (ref=DSL_REF_CONDITION window=DSL_CEP_DURATION)
	 */
	protected void sequence_DSL_CEP_SUM(ISerializationContext context, DSL_CEP_SUM semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_SUM__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_SUM__REF));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_CEP_SUM__WINDOW) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_CEP_SUM__WINDOW));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_CEP_SUMAccess().getRefDSL_REF_CONDITIONParserRuleCall_2_0(), semanticObject.getRef());
		feeder.accept(grammarAccess.getDSL_CEP_SUMAccess().getWindowDSL_CEP_DURATIONParserRuleCall_4_0(), semanticObject.getWindow());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_ECA_STATEMENT returns DSL_ECA_STATEMENT
	 *
	 * Constraint:
	 *     (ifdo=DSL_IfDo elseIfdo+=DSL_ElseIfDo* elsedo=DSL_ElseDo?)
	 */
	protected void sequence_DSL_ECA_STATEMENT(ISerializationContext context, DSL_ECA_STATEMENT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_ElseDo returns DSL_ElseDo
	 *
	 * Constraint:
	 *     actions=DSL_ListActions
	 */
	protected void sequence_DSL_ElseDo(ISerializationContext context, DSL_ElseDo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_ELSE_DO__ACTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_ELSE_DO__ACTIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_ElseDoAccess().getActionsDSL_ListActionsParserRuleCall_1_0(), semanticObject.getActions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_ElseIfDo returns DSL_ElseIfDo
	 *
	 * Constraint:
	 *     (condition=DSL_Expression_Or actions=DSL_ListActions)
	 */
	protected void sequence_DSL_ElseIfDo(ISerializationContext context, DSL_ElseIfDo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_ELSE_IF_DO__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_ELSE_IF_DO__CONDITION));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_ELSE_IF_DO__ACTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_ELSE_IF_DO__ACTIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_ElseIfDoAccess().getConditionDSL_Expression_OrParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getDSL_ElseIfDoAccess().getActionsDSL_ListActionsParserRuleCall_3_0(), semanticObject.getActions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_And
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_And
	 *     DSL_Expression_And returns DSL_Expression_And
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_And
	 *     DSL_Expression_DiffEqual returns DSL_Expression_And
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_And
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_And
	 *     DSL_Expression_Compare returns DSL_Expression_And
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_And
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_And
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_And
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_And
	 *     DSL_Expression_PlusMinus returns DSL_Expression_And
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_And
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_And
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_And
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_And
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_And
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_And
	 *     DSL_Expression_Unary returns DSL_Expression_And
	 *
	 * Constraint:
	 *     (left=DSL_Expression_And_DSL_Expression_And_1_1 right=DSL_Expression_DiffEqual)
	 */
	protected void sequence_DSL_Expression_And(ISerializationContext context, DSL_Expression_And semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_AND__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_AND__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_AND__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_AND__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_AndAccess().getDSL_Expression_AndLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_AndAccess().getRightDSL_Expression_DiffEqualParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Larger
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Larger
	 *     DSL_Expression_And returns DSL_Expression_Larger
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Larger
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Larger
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Larger
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Larger
	 *     DSL_Expression_Compare returns DSL_Expression_Larger
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Larger
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Larger
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Larger
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Larger
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Larger
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Larger
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Larger
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Larger
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Larger
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Larger
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Larger
	 *     DSL_Expression_Unary returns DSL_Expression_Larger
	 *
	 * Constraint:
	 *     (left=DSL_Expression_Compare_DSL_Expression_Larger_1_0_1 right=DSL_Expression_PlusMinus)
	 */
	protected void sequence_DSL_Expression_Compare(ISerializationContext context, DSL_Expression_Larger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_LARGER__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_LARGER__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_LARGER__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_LARGER__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_CompareAccess().getDSL_Expression_LargerLeftAction_1_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_CompareAccess().getRightDSL_Expression_PlusMinusParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_And returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_Compare returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Larger_Equal
	 *     DSL_Expression_Unary returns DSL_Expression_Larger_Equal
	 *
	 * Constraint:
	 *     (left=DSL_Expression_Compare_DSL_Expression_Larger_Equal_1_1_1 right=DSL_Expression_PlusMinus)
	 */
	protected void sequence_DSL_Expression_Compare(ISerializationContext context, DSL_Expression_Larger_Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_LARGER_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_LARGER_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_LARGER_EQUAL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_LARGER_EQUAL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_CompareAccess().getDSL_Expression_Larger_EqualLeftAction_1_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_CompareAccess().getRightDSL_Expression_PlusMinusParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Smaller
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_And returns DSL_Expression_Smaller
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Smaller
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_Compare returns DSL_Expression_Smaller
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Smaller
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Smaller
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Smaller
	 *     DSL_Expression_Unary returns DSL_Expression_Smaller
	 *
	 * Constraint:
	 *     (left=DSL_Expression_Compare_DSL_Expression_Smaller_1_2_1 right=DSL_Expression_PlusMinus)
	 */
	protected void sequence_DSL_Expression_Compare(ISerializationContext context, DSL_Expression_Smaller semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_SMALLER__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_SMALLER__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_SMALLER__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_SMALLER__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_CompareAccess().getDSL_Expression_SmallerLeftAction_1_2_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_CompareAccess().getRightDSL_Expression_PlusMinusParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_And returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_Compare returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Smaller_Equal
	 *     DSL_Expression_Unary returns DSL_Expression_Smaller_Equal
	 *
	 * Constraint:
	 *     (left=DSL_Expression_Compare_DSL_Expression_Smaller_Equal_1_3_1 right=DSL_Expression_PlusMinus)
	 */
	protected void sequence_DSL_Expression_Compare(ISerializationContext context, DSL_Expression_Smaller_Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_SMALLER_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_SMALLER_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_SMALLER_EQUAL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_SMALLER_EQUAL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_CompareAccess().getDSL_Expression_Smaller_EqualLeftAction_1_3_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_CompareAccess().getRightDSL_Expression_PlusMinusParserRuleCall_1_3_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Diff
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Diff
	 *     DSL_Expression_And returns DSL_Expression_Diff
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Diff
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Diff
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Diff
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Diff
	 *     DSL_Expression_Compare returns DSL_Expression_Diff
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Diff
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Diff
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Diff
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Diff
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Diff
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Diff
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Diff
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Diff
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Diff
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Diff
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Diff
	 *     DSL_Expression_Unary returns DSL_Expression_Diff
	 *
	 * Constraint:
	 *     (left=DSL_Expression_DiffEqual_DSL_Expression_Diff_1_0_1 right=DSL_Expression_Compare)
	 */
	protected void sequence_DSL_Expression_DiffEqual(ISerializationContext context, DSL_Expression_Diff semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_DIFF__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_DIFF__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_DIFF__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_DIFF__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_DiffEqualAccess().getDSL_Expression_DiffLeftAction_1_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_DiffEqualAccess().getRightDSL_Expression_CompareParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Equal
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Equal
	 *     DSL_Expression_And returns DSL_Expression_Equal
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Equal
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Equal
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Equal
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Equal
	 *     DSL_Expression_Compare returns DSL_Expression_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Equal
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Equal
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Equal
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Equal
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Equal
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Equal
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Equal
	 *     DSL_Expression_Unary returns DSL_Expression_Equal
	 *
	 * Constraint:
	 *     (left=DSL_Expression_DiffEqual_DSL_Expression_Equal_1_1_1 right=DSL_Expression_Compare)
	 */
	protected void sequence_DSL_Expression_DiffEqual(ISerializationContext context, DSL_Expression_Equal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_EQUAL__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_EQUAL__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_EQUAL__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_EQUAL__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_DiffEqualAccess().getDSL_Expression_EqualLeftAction_1_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_DiffEqualAccess().getRightDSL_Expression_CompareParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Division
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Division
	 *     DSL_Expression_And returns DSL_Expression_Division
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Division
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Division
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Division
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Division
	 *     DSL_Expression_Compare returns DSL_Expression_Division
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Division
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Division
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Division
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Division
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Division
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Division
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Division
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Division
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Division
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Division
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Division
	 *     DSL_Expression_Unary returns DSL_Expression_Division
	 *
	 * Constraint:
	 *     (left=DSL_Expression_MultiplicationDivision_DSL_Expression_Division_1_1_1 right=DSL_Expression_Unary)
	 */
	protected void sequence_DSL_Expression_MultiplicationDivision(ISerializationContext context, DSL_Expression_Division semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_DIVISION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_DIVISION__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_DIVISION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_DIVISION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getDSL_Expression_DivisionLeftAction_1_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getRightDSL_Expression_UnaryParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Modulo
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_And returns DSL_Expression_Modulo
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Modulo
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_Compare returns DSL_Expression_Modulo
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Modulo
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Modulo
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Modulo
	 *     DSL_Expression_Unary returns DSL_Expression_Modulo
	 *
	 * Constraint:
	 *     (left=DSL_Expression_MultiplicationDivision_DSL_Expression_Modulo_1_2_1 right=DSL_Expression_Unary)
	 */
	protected void sequence_DSL_Expression_MultiplicationDivision(ISerializationContext context, DSL_Expression_Modulo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MODULO__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MODULO__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MODULO__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MODULO__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getDSL_Expression_ModuloLeftAction_1_2_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getRightDSL_Expression_UnaryParserRuleCall_1_2_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Multiplication
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_And returns DSL_Expression_Multiplication
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Multiplication
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_Compare returns DSL_Expression_Multiplication
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Multiplication
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Multiplication
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Multiplication
	 *     DSL_Expression_Unary returns DSL_Expression_Multiplication
	 *
	 * Constraint:
	 *     (left=DSL_Expression_MultiplicationDivision_DSL_Expression_Multiplication_1_0_1 right=DSL_Expression_Unary)
	 */
	protected void sequence_DSL_Expression_MultiplicationDivision(ISerializationContext context, DSL_Expression_Multiplication semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MULTIPLICATION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MULTIPLICATION__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MULTIPLICATION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MULTIPLICATION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getDSL_Expression_MultiplicationLeftAction_1_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getRightDSL_Expression_UnaryParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Or
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Or
	 *     DSL_Expression_And returns DSL_Expression_Or
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Or
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Or
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Or
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Or
	 *     DSL_Expression_Compare returns DSL_Expression_Or
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Or
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Or
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Or
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Or
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Or
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Or
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Or
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Or
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Or
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Or
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Or
	 *     DSL_Expression_Unary returns DSL_Expression_Or
	 *
	 * Constraint:
	 *     (left=DSL_Expression_Or_DSL_Expression_Or_1_1 right=DSL_Expression_And)
	 */
	protected void sequence_DSL_Expression_Or(ISerializationContext context, DSL_Expression_Or semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_OR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_OR__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_OR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_OR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_OrAccess().getDSL_Expression_OrLeftAction_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_OrAccess().getRightDSL_Expression_AndParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Minus
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Minus
	 *     DSL_Expression_And returns DSL_Expression_Minus
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Minus
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Minus
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Minus
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Minus
	 *     DSL_Expression_Compare returns DSL_Expression_Minus
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Minus
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Minus
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Minus
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Minus
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Minus
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Minus
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Minus
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Minus
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Minus
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Minus
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Minus
	 *     DSL_Expression_Unary returns DSL_Expression_Minus
	 *
	 * Constraint:
	 *     (left=DSL_Expression_PlusMinus_DSL_Expression_Minus_1_1_1 right=DSL_Expression_MultiplicationDivision)
	 */
	protected void sequence_DSL_Expression_PlusMinus(ISerializationContext context, DSL_Expression_Minus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MINUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MINUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MINUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_MINUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_PlusMinusAccess().getDSL_Expression_MinusLeftAction_1_1_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_PlusMinusAccess().getRightDSL_Expression_MultiplicationDivisionParserRuleCall_1_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Plus
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Plus
	 *     DSL_Expression_And returns DSL_Expression_Plus
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Plus
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Plus
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Plus
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Plus
	 *     DSL_Expression_Compare returns DSL_Expression_Plus
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Plus
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Plus
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Plus
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Plus
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Plus
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Plus
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Plus
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Plus
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Plus
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Plus
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Plus
	 *     DSL_Expression_Unary returns DSL_Expression_Plus
	 *
	 * Constraint:
	 *     (left=DSL_Expression_PlusMinus_DSL_Expression_Plus_1_0_1 right=DSL_Expression_MultiplicationDivision)
	 */
	protected void sequence_DSL_Expression_PlusMinus(ISerializationContext context, DSL_Expression_Plus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_PLUS__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_PLUS__LEFT));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_PLUS__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_PLUS__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_PlusMinusAccess().getDSL_Expression_PlusLeftAction_1_0_1(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDSL_Expression_PlusMinusAccess().getRightDSL_Expression_MultiplicationDivisionParserRuleCall_1_0_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Expression_Negate
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Expression_Negate
	 *     DSL_Expression_And returns DSL_Expression_Negate
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Expression_Negate
	 *     DSL_Expression_DiffEqual returns DSL_Expression_Negate
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Expression_Negate
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Expression_Negate
	 *     DSL_Expression_Compare returns DSL_Expression_Negate
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Expression_Negate
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Expression_Negate
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Expression_Negate
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Expression_Negate
	 *     DSL_Expression_PlusMinus returns DSL_Expression_Negate
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Expression_Negate
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Expression_Negate
	 *     DSL_Expression_MultiplicationDivision returns DSL_Expression_Negate
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Expression_Negate
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Expression_Negate
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Expression_Negate
	 *     DSL_Expression_Unary returns DSL_Expression_Negate
	 *
	 * Constraint:
	 *     exp=DSL_Expression_Unary
	 */
	protected void sequence_DSL_Expression_Unary(ISerializationContext context, DSL_Expression_Negate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_NEGATE__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_EXPRESSION_NEGATE__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_UnaryAccess().getExpDSL_Expression_UnaryParserRuleCall_5_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Object_Boolean
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Object_Boolean
	 *     DSL_Expression_And returns DSL_Object_Boolean
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Object_Boolean
	 *     DSL_Expression_DiffEqual returns DSL_Object_Boolean
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Object_Boolean
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Object_Boolean
	 *     DSL_Expression_Compare returns DSL_Object_Boolean
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Object_Boolean
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Object_Boolean
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Object_Boolean
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Object_Boolean
	 *     DSL_Expression_PlusMinus returns DSL_Object_Boolean
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Object_Boolean
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Object_Boolean
	 *     DSL_Expression_MultiplicationDivision returns DSL_Object_Boolean
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Object_Boolean
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Object_Boolean
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Object_Boolean
	 *     DSL_Expression_Unary returns DSL_Object_Boolean
	 *
	 * Constraint:
	 *     value=BOOLEAN
	 */
	protected void sequence_DSL_Expression_Unary(ISerializationContext context, DSL_Object_Boolean semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_OBJECT_BOOLEAN__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_OBJECT_BOOLEAN__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_UnaryAccess().getValueBOOLEANTerminalRuleCall_2_1_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Object_Number
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Object_Number
	 *     DSL_Expression_And returns DSL_Object_Number
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Object_Number
	 *     DSL_Expression_DiffEqual returns DSL_Object_Number
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Object_Number
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Object_Number
	 *     DSL_Expression_Compare returns DSL_Object_Number
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Object_Number
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Object_Number
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Object_Number
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Object_Number
	 *     DSL_Expression_PlusMinus returns DSL_Object_Number
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Object_Number
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Object_Number
	 *     DSL_Expression_MultiplicationDivision returns DSL_Object_Number
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Object_Number
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Object_Number
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Object_Number
	 *     DSL_Expression_Unary returns DSL_Object_Number
	 *
	 * Constraint:
	 *     value=NUMBER
	 */
	protected void sequence_DSL_Expression_Unary(ISerializationContext context, DSL_Object_Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_OBJECT_NUMBER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_OBJECT_NUMBER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_UnaryAccess().getValueNUMBERParserRuleCall_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Object_Ref
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Object_Ref
	 *     DSL_Expression_And returns DSL_Object_Ref
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Object_Ref
	 *     DSL_Expression_DiffEqual returns DSL_Object_Ref
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Object_Ref
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Object_Ref
	 *     DSL_Expression_Compare returns DSL_Object_Ref
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Object_Ref
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Object_Ref
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Object_Ref
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Object_Ref
	 *     DSL_Expression_PlusMinus returns DSL_Object_Ref
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Object_Ref
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Object_Ref
	 *     DSL_Expression_MultiplicationDivision returns DSL_Object_Ref
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Object_Ref
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Object_Ref
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Object_Ref
	 *     DSL_Expression_Unary returns DSL_Object_Ref
	 *
	 * Constraint:
	 *     value=[DSL_REF|ID]
	 */
	protected void sequence_DSL_Expression_Unary(ISerializationContext context, DSL_Object_Ref semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_OBJECT_REF__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_OBJECT_REF__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_UnaryAccess().getValueDSL_REFIDTerminalRuleCall_3_1_0_1(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Expression_Or returns DSL_Object_String
	 *     DSL_Expression_Or.DSL_Expression_Or_1_1 returns DSL_Object_String
	 *     DSL_Expression_And returns DSL_Object_String
	 *     DSL_Expression_And.DSL_Expression_And_1_1 returns DSL_Object_String
	 *     DSL_Expression_DiffEqual returns DSL_Object_String
	 *     DSL_Expression_DiffEqual.DSL_Expression_Diff_1_0_1 returns DSL_Object_String
	 *     DSL_Expression_DiffEqual.DSL_Expression_Equal_1_1_1 returns DSL_Object_String
	 *     DSL_Expression_Compare returns DSL_Object_String
	 *     DSL_Expression_Compare.DSL_Expression_Larger_1_0_1 returns DSL_Object_String
	 *     DSL_Expression_Compare.DSL_Expression_Larger_Equal_1_1_1 returns DSL_Object_String
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_1_2_1 returns DSL_Object_String
	 *     DSL_Expression_Compare.DSL_Expression_Smaller_Equal_1_3_1 returns DSL_Object_String
	 *     DSL_Expression_PlusMinus returns DSL_Object_String
	 *     DSL_Expression_PlusMinus.DSL_Expression_Plus_1_0_1 returns DSL_Object_String
	 *     DSL_Expression_PlusMinus.DSL_Expression_Minus_1_1_1 returns DSL_Object_String
	 *     DSL_Expression_MultiplicationDivision returns DSL_Object_String
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Multiplication_1_0_1 returns DSL_Object_String
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Division_1_1_1 returns DSL_Object_String
	 *     DSL_Expression_MultiplicationDivision.DSL_Expression_Modulo_1_2_1 returns DSL_Object_String
	 *     DSL_Expression_Unary returns DSL_Object_String
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_DSL_Expression_Unary(ISerializationContext context, DSL_Object_String semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_OBJECT_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_OBJECT_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_Expression_UnaryAccess().getValueSTRINGTerminalRuleCall_1_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_IfDo returns DSL_IfDo
	 *
	 * Constraint:
	 *     (condition=DSL_Expression_Or actions=DSL_ListActions)
	 */
	protected void sequence_DSL_IfDo(ISerializationContext context, DSL_IfDo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_IF_DO__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_IF_DO__CONDITION));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_IF_DO__ACTIONS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_IF_DO__ACTIONS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_IfDoAccess().getConditionDSL_Expression_OrParserRuleCall_1_0(), semanticObject.getCondition());
		feeder.accept(grammarAccess.getDSL_IfDoAccess().getActionsDSL_ListActionsParserRuleCall_3_0(), semanticObject.getActions());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_ListActions returns DSL_ListActions
	 *
	 * Constraint:
	 *     (actionList+=DSL_ResourceAction actionList+=DSL_ResourceAction*)
	 */
	protected void sequence_DSL_ListActions(ISerializationContext context, DSL_ListActions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_ListParam returns DSL_ListParam
	 *
	 * Constraint:
	 *     (param+=DSL_Expression_Or param+=DSL_Expression_Or*)
	 */
	protected void sequence_DSL_ListParam(ISerializationContext context, DSL_ListParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_On returns DSL_On
	 *
	 * Constraint:
	 *     (triggers+=DSL_REF_CONDITION triggers+=DSL_REF_CONDITION*)
	 */
	protected void sequence_DSL_On(ISerializationContext context, DSL_On semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_REF_CONDITION returns DSL_REF_CONDITION
	 *
	 * Constraint:
	 *     ref=[DSL_REF|ID]
	 */
	protected void sequence_DSL_REF_CONDITION(ISerializationContext context, DSL_REF_CONDITION semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_REF_CONDITION__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_REF_CONDITION__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_REF_CONDITIONAccess().getRefDSL_REFIDTerminalRuleCall_0_0_1(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_ResourceAction returns DSL_ResourceAction
	 *
	 * Constraint:
	 *     (variable=ID? ref=[DSL_REF|ID] (actiontype='act' | actiontype='set') listParam=DSL_ListParam?)
	 */
	protected void sequence_DSL_ResourceAction(ISerializationContext context, DSL_ResourceAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DSL_Resource returns DSL_Resource
	 *     DSL_REF returns DSL_Resource
	 *
	 * Constraint:
	 *     (name=ID gatewayID=EXTENDED_ID deviceID=EXTENDED_ID serviceID=EXTENDED_ID resourceID=EXTENDED_ID)
	 */
	protected void sequence_DSL_Resource(ISerializationContext context, DSL_Resource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_REF__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_REF__NAME));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_RESOURCE__GATEWAY_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_RESOURCE__GATEWAY_ID));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_RESOURCE__DEVICE_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_RESOURCE__DEVICE_ID));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_RESOURCE__SERVICE_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_RESOURCE__SERVICE_ID));
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.DSL_RESOURCE__RESOURCE_ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.DSL_RESOURCE__RESOURCE_ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDSL_ResourceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDSL_ResourceAccess().getGatewayIDEXTENDED_IDParserRuleCall_4_0(), semanticObject.getGatewayID());
		feeder.accept(grammarAccess.getDSL_ResourceAccess().getDeviceIDEXTENDED_IDParserRuleCall_6_0(), semanticObject.getDeviceID());
		feeder.accept(grammarAccess.getDSL_ResourceAccess().getServiceIDEXTENDED_IDParserRuleCall_8_0(), semanticObject.getServiceID());
		feeder.accept(grammarAccess.getDSL_ResourceAccess().getResourceIDEXTENDED_IDParserRuleCall_10_0(), semanticObject.getResourceID());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DSL_SENSINACT returns DSL_SENSINACT
	 *
	 * Constraint:
	 *     (resources+=DSL_Resource+ cep+=DSL_CEP_STATEMENT* on=DSL_On eca=DSL_ECA_STATEMENT)
	 */
	protected void sequence_DSL_SENSINACT(ISerializationContext context, DSL_SENSINACT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sensinact returns Sensinact
	 *
	 * Constraint:
	 *     eca=DSL_SENSINACT
	 */
	protected void sequence_Sensinact(ISerializationContext context, Sensinact semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SensinactPackage.Literals.SENSINACT__ECA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SensinactPackage.Literals.SENSINACT__ECA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSensinactAccess().getEcaDSL_SENSINACTParserRuleCall_1_0(), semanticObject.getEca());
		feeder.finish();
	}
	
	
}
