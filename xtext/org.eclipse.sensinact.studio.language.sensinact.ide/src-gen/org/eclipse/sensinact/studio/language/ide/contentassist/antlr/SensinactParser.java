/**
 * Copyright (c) 2017 CEA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 *  Contributors:
 *     CEA - initial API and implementation and/or initial documentation
 */
/*
 * generated by Xtext 2.9.1
 */
package org.eclipse.sensinact.studio.language.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.sensinact.studio.language.ide.contentassist.antlr.internal.InternalSensinactParser;
import org.eclipse.sensinact.studio.language.services.SensinactGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class SensinactParser extends AbstractContentAssistParser {

	@Inject
	private SensinactGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSensinactParser createParser() {
		InternalSensinactParser result = new InternalSensinactParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNUMBERAccess().getAlternatives(), "rule__NUMBER__Alternatives");
					put(grammarAccess.getDSL_REFAccess().getAlternatives(), "rule__DSL_REF__Alternatives");
					put(grammarAccess.getDSL_CEP_STATEMENTAccess().getOperationAlternatives_3_0(), "rule__DSL_CEP_STATEMENT__OperationAlternatives_3_0");
					put(grammarAccess.getDSL_CEP_DURATIONAccess().getUnitsAlternatives_0(), "rule__DSL_CEP_DURATION__UnitsAlternatives_0");
					put(grammarAccess.getDSL_ResourceActionAccess().getActiontypeAlternatives_3_0(), "rule__DSL_ResourceAction__ActiontypeAlternatives_3_0");
					put(grammarAccess.getDSL_Expression_DiffEqualAccess().getAlternatives_1(), "rule__DSL_Expression_DiffEqual__Alternatives_1");
					put(grammarAccess.getDSL_Expression_CompareAccess().getAlternatives_1(), "rule__DSL_Expression_Compare__Alternatives_1");
					put(grammarAccess.getDSL_Expression_PlusMinusAccess().getAlternatives_1(), "rule__DSL_Expression_PlusMinus__Alternatives_1");
					put(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getAlternatives_1(), "rule__DSL_Expression_MultiplicationDivision__Alternatives_1");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getAlternatives(), "rule__DSL_Expression_Unary__Alternatives");
					put(grammarAccess.getSensinactAccess().getGroup(), "rule__Sensinact__Group__0");
					put(grammarAccess.getDSL_SENSINACTAccess().getGroup(), "rule__DSL_SENSINACT__Group__0");
					put(grammarAccess.getDSL_ResourceAccess().getGroup(), "rule__DSL_Resource__Group__0");
					put(grammarAccess.getDSL_OnAccess().getGroup(), "rule__DSL_On__Group__0");
					put(grammarAccess.getDSL_OnAccess().getGroup_2(), "rule__DSL_On__Group_2__0");
					put(grammarAccess.getDSL_ECA_STATEMENTAccess().getGroup(), "rule__DSL_ECA_STATEMENT__Group__0");
					put(grammarAccess.getDSL_IfDoAccess().getGroup(), "rule__DSL_IfDo__Group__0");
					put(grammarAccess.getDSL_ElseIfDoAccess().getGroup(), "rule__DSL_ElseIfDo__Group__0");
					put(grammarAccess.getDSL_ElseDoAccess().getGroup(), "rule__DSL_ElseDo__Group__0");
					put(grammarAccess.getNUMBERAccess().getGroup_1(), "rule__NUMBER__Group_1__0");
					put(grammarAccess.getEXTENDED_IDAccess().getGroup(), "rule__EXTENDED_ID__Group__0");
					put(grammarAccess.getEXTENDED_IDAccess().getGroup_1(), "rule__EXTENDED_ID__Group_1__0");
					put(grammarAccess.getDSL_REF_CONDITIONAccess().getGroup(), "rule__DSL_REF_CONDITION__Group__0");
					put(grammarAccess.getDSL_CEP_STATEMENTAccess().getGroup(), "rule__DSL_CEP_STATEMENT__Group__0");
					put(grammarAccess.getDSL_CEP_AFTERAccess().getGroup(), "rule__DSL_CEP_AFTER__Group__0");
					put(grammarAccess.getDSL_CEP_AFTERAccess().getGroup_6(), "rule__DSL_CEP_AFTER__Group_6__0");
					put(grammarAccess.getDSL_CEP_BEFOREAccess().getGroup(), "rule__DSL_CEP_BEFORE__Group__0");
					put(grammarAccess.getDSL_CEP_BEFOREAccess().getGroup_6(), "rule__DSL_CEP_BEFORE__Group_6__0");
					put(grammarAccess.getDSL_CEP_COINCIDEAccess().getGroup(), "rule__DSL_CEP_COINCIDE__Group__0");
					put(grammarAccess.getDSL_CEP_MINAccess().getGroup(), "rule__DSL_CEP_MIN__Group__0");
					put(grammarAccess.getDSL_CEP_MAXAccess().getGroup(), "rule__DSL_CEP_MAX__Group__0");
					put(grammarAccess.getDSL_CEP_AVGAccess().getGroup(), "rule__DSL_CEP_AVG__Group__0");
					put(grammarAccess.getDSL_CEP_SUMAccess().getGroup(), "rule__DSL_CEP_SUM__Group__0");
					put(grammarAccess.getDSL_CEP_COUNTAccess().getGroup(), "rule__DSL_CEP_COUNT__Group__0");
					put(grammarAccess.getDSL_CEP_DURATION_MINAccess().getGroup(), "rule__DSL_CEP_DURATION_MIN__Group__0");
					put(grammarAccess.getDSL_CEP_DURATION_SECAccess().getGroup(), "rule__DSL_CEP_DURATION_SEC__Group__0");
					put(grammarAccess.getDSL_ListActionsAccess().getGroup(), "rule__DSL_ListActions__Group__0");
					put(grammarAccess.getDSL_ListActionsAccess().getGroup_1(), "rule__DSL_ListActions__Group_1__0");
					put(grammarAccess.getDSL_ResourceActionAccess().getGroup(), "rule__DSL_ResourceAction__Group__0");
					put(grammarAccess.getDSL_ResourceActionAccess().getGroup_0(), "rule__DSL_ResourceAction__Group_0__0");
					put(grammarAccess.getDSL_ListParamAccess().getGroup(), "rule__DSL_ListParam__Group__0");
					put(grammarAccess.getDSL_ListParamAccess().getGroup_1(), "rule__DSL_ListParam__Group_1__0");
					put(grammarAccess.getDSL_Expression_OrAccess().getGroup(), "rule__DSL_Expression_Or__Group__0");
					put(grammarAccess.getDSL_Expression_OrAccess().getGroup_1(), "rule__DSL_Expression_Or__Group_1__0");
					put(grammarAccess.getDSL_Expression_AndAccess().getGroup(), "rule__DSL_Expression_And__Group__0");
					put(grammarAccess.getDSL_Expression_AndAccess().getGroup_1(), "rule__DSL_Expression_And__Group_1__0");
					put(grammarAccess.getDSL_Expression_DiffEqualAccess().getGroup(), "rule__DSL_Expression_DiffEqual__Group__0");
					put(grammarAccess.getDSL_Expression_DiffEqualAccess().getGroup_1_0(), "rule__DSL_Expression_DiffEqual__Group_1_0__0");
					put(grammarAccess.getDSL_Expression_DiffEqualAccess().getGroup_1_1(), "rule__DSL_Expression_DiffEqual__Group_1_1__0");
					put(grammarAccess.getDSL_Expression_CompareAccess().getGroup(), "rule__DSL_Expression_Compare__Group__0");
					put(grammarAccess.getDSL_Expression_CompareAccess().getGroup_1_0(), "rule__DSL_Expression_Compare__Group_1_0__0");
					put(grammarAccess.getDSL_Expression_CompareAccess().getGroup_1_1(), "rule__DSL_Expression_Compare__Group_1_1__0");
					put(grammarAccess.getDSL_Expression_CompareAccess().getGroup_1_2(), "rule__DSL_Expression_Compare__Group_1_2__0");
					put(grammarAccess.getDSL_Expression_CompareAccess().getGroup_1_3(), "rule__DSL_Expression_Compare__Group_1_3__0");
					put(grammarAccess.getDSL_Expression_PlusMinusAccess().getGroup(), "rule__DSL_Expression_PlusMinus__Group__0");
					put(grammarAccess.getDSL_Expression_PlusMinusAccess().getGroup_1_0(), "rule__DSL_Expression_PlusMinus__Group_1_0__0");
					put(grammarAccess.getDSL_Expression_PlusMinusAccess().getGroup_1_1(), "rule__DSL_Expression_PlusMinus__Group_1_1__0");
					put(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getGroup(), "rule__DSL_Expression_MultiplicationDivision__Group__0");
					put(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getGroup_1_0(), "rule__DSL_Expression_MultiplicationDivision__Group_1_0__0");
					put(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getGroup_1_1(), "rule__DSL_Expression_MultiplicationDivision__Group_1_1__0");
					put(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getGroup_1_2(), "rule__DSL_Expression_MultiplicationDivision__Group_1_2__0");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getGroup_0(), "rule__DSL_Expression_Unary__Group_0__0");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getGroup_1(), "rule__DSL_Expression_Unary__Group_1__0");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getGroup_2(), "rule__DSL_Expression_Unary__Group_2__0");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getGroup_3(), "rule__DSL_Expression_Unary__Group_3__0");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getGroup_4(), "rule__DSL_Expression_Unary__Group_4__0");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getGroup_5(), "rule__DSL_Expression_Unary__Group_5__0");
					put(grammarAccess.getSensinactAccess().getEcaAssignment_1(), "rule__Sensinact__EcaAssignment_1");
					put(grammarAccess.getDSL_SENSINACTAccess().getResourcesAssignment_0(), "rule__DSL_SENSINACT__ResourcesAssignment_0");
					put(grammarAccess.getDSL_SENSINACTAccess().getCepAssignment_1(), "rule__DSL_SENSINACT__CepAssignment_1");
					put(grammarAccess.getDSL_SENSINACTAccess().getOnAssignment_2(), "rule__DSL_SENSINACT__OnAssignment_2");
					put(grammarAccess.getDSL_SENSINACTAccess().getEcaAssignment_3(), "rule__DSL_SENSINACT__EcaAssignment_3");
					put(grammarAccess.getDSL_ResourceAccess().getNameAssignment_1(), "rule__DSL_Resource__NameAssignment_1");
					put(grammarAccess.getDSL_ResourceAccess().getGatewayIDAssignment_4(), "rule__DSL_Resource__GatewayIDAssignment_4");
					put(grammarAccess.getDSL_ResourceAccess().getDeviceIDAssignment_6(), "rule__DSL_Resource__DeviceIDAssignment_6");
					put(grammarAccess.getDSL_ResourceAccess().getServiceIDAssignment_8(), "rule__DSL_Resource__ServiceIDAssignment_8");
					put(grammarAccess.getDSL_ResourceAccess().getResourceIDAssignment_10(), "rule__DSL_Resource__ResourceIDAssignment_10");
					put(grammarAccess.getDSL_OnAccess().getTriggersAssignment_1(), "rule__DSL_On__TriggersAssignment_1");
					put(grammarAccess.getDSL_OnAccess().getTriggersAssignment_2_1(), "rule__DSL_On__TriggersAssignment_2_1");
					put(grammarAccess.getDSL_ECA_STATEMENTAccess().getIfdoAssignment_0(), "rule__DSL_ECA_STATEMENT__IfdoAssignment_0");
					put(grammarAccess.getDSL_ECA_STATEMENTAccess().getElseIfdoAssignment_1(), "rule__DSL_ECA_STATEMENT__ElseIfdoAssignment_1");
					put(grammarAccess.getDSL_ECA_STATEMENTAccess().getElsedoAssignment_2(), "rule__DSL_ECA_STATEMENT__ElsedoAssignment_2");
					put(grammarAccess.getDSL_IfDoAccess().getConditionAssignment_1(), "rule__DSL_IfDo__ConditionAssignment_1");
					put(grammarAccess.getDSL_IfDoAccess().getActionsAssignment_3(), "rule__DSL_IfDo__ActionsAssignment_3");
					put(grammarAccess.getDSL_ElseIfDoAccess().getConditionAssignment_1(), "rule__DSL_ElseIfDo__ConditionAssignment_1");
					put(grammarAccess.getDSL_ElseIfDoAccess().getActionsAssignment_3(), "rule__DSL_ElseIfDo__ActionsAssignment_3");
					put(grammarAccess.getDSL_ElseDoAccess().getActionsAssignment_1(), "rule__DSL_ElseDo__ActionsAssignment_1");
					put(grammarAccess.getDSL_REF_CONDITIONAccess().getRefAssignment_0(), "rule__DSL_REF_CONDITION__RefAssignment_0");
					put(grammarAccess.getDSL_CEP_STATEMENTAccess().getNameAssignment_1(), "rule__DSL_CEP_STATEMENT__NameAssignment_1");
					put(grammarAccess.getDSL_CEP_STATEMENTAccess().getOperationAssignment_3(), "rule__DSL_CEP_STATEMENT__OperationAssignment_3");
					put(grammarAccess.getDSL_CEP_AFTERAccess().getRef1Assignment_2(), "rule__DSL_CEP_AFTER__Ref1Assignment_2");
					put(grammarAccess.getDSL_CEP_AFTERAccess().getRef2Assignment_4(), "rule__DSL_CEP_AFTER__Ref2Assignment_4");
					put(grammarAccess.getDSL_CEP_AFTERAccess().getStartAssignment_6_0(), "rule__DSL_CEP_AFTER__StartAssignment_6_0");
					put(grammarAccess.getDSL_CEP_AFTERAccess().getEndAssignment_7(), "rule__DSL_CEP_AFTER__EndAssignment_7");
					put(grammarAccess.getDSL_CEP_BEFOREAccess().getRef1Assignment_2(), "rule__DSL_CEP_BEFORE__Ref1Assignment_2");
					put(grammarAccess.getDSL_CEP_BEFOREAccess().getRef2Assignment_4(), "rule__DSL_CEP_BEFORE__Ref2Assignment_4");
					put(grammarAccess.getDSL_CEP_BEFOREAccess().getStartAssignment_6_0(), "rule__DSL_CEP_BEFORE__StartAssignment_6_0");
					put(grammarAccess.getDSL_CEP_BEFOREAccess().getEndAssignment_7(), "rule__DSL_CEP_BEFORE__EndAssignment_7");
					put(grammarAccess.getDSL_CEP_COINCIDEAccess().getRef1Assignment_2(), "rule__DSL_CEP_COINCIDE__Ref1Assignment_2");
					put(grammarAccess.getDSL_CEP_COINCIDEAccess().getRef2Assignment_4(), "rule__DSL_CEP_COINCIDE__Ref2Assignment_4");
					put(grammarAccess.getDSL_CEP_COINCIDEAccess().getWindowAssignment_6(), "rule__DSL_CEP_COINCIDE__WindowAssignment_6");
					put(grammarAccess.getDSL_CEP_MINAccess().getRefAssignment_2(), "rule__DSL_CEP_MIN__RefAssignment_2");
					put(grammarAccess.getDSL_CEP_MINAccess().getWindowAssignment_4(), "rule__DSL_CEP_MIN__WindowAssignment_4");
					put(grammarAccess.getDSL_CEP_MAXAccess().getRefAssignment_2(), "rule__DSL_CEP_MAX__RefAssignment_2");
					put(grammarAccess.getDSL_CEP_MAXAccess().getWindowAssignment_4(), "rule__DSL_CEP_MAX__WindowAssignment_4");
					put(grammarAccess.getDSL_CEP_AVGAccess().getRefAssignment_2(), "rule__DSL_CEP_AVG__RefAssignment_2");
					put(grammarAccess.getDSL_CEP_AVGAccess().getWindowAssignment_4(), "rule__DSL_CEP_AVG__WindowAssignment_4");
					put(grammarAccess.getDSL_CEP_SUMAccess().getRefAssignment_2(), "rule__DSL_CEP_SUM__RefAssignment_2");
					put(grammarAccess.getDSL_CEP_SUMAccess().getWindowAssignment_4(), "rule__DSL_CEP_SUM__WindowAssignment_4");
					put(grammarAccess.getDSL_CEP_COUNTAccess().getRefAssignment_2(), "rule__DSL_CEP_COUNT__RefAssignment_2");
					put(grammarAccess.getDSL_CEP_COUNTAccess().getWindowAssignment_4(), "rule__DSL_CEP_COUNT__WindowAssignment_4");
					put(grammarAccess.getDSL_CEP_DURATIONAccess().getUnitsAssignment(), "rule__DSL_CEP_DURATION__UnitsAssignment");
					put(grammarAccess.getDSL_CEP_DURATION_MINAccess().getMinAssignment_0(), "rule__DSL_CEP_DURATION_MIN__MinAssignment_0");
					put(grammarAccess.getDSL_CEP_DURATION_SECAccess().getSecAssignment_0(), "rule__DSL_CEP_DURATION_SEC__SecAssignment_0");
					put(grammarAccess.getDSL_ListActionsAccess().getActionListAssignment_0(), "rule__DSL_ListActions__ActionListAssignment_0");
					put(grammarAccess.getDSL_ListActionsAccess().getActionListAssignment_1_1(), "rule__DSL_ListActions__ActionListAssignment_1_1");
					put(grammarAccess.getDSL_ResourceActionAccess().getVariableAssignment_0_0(), "rule__DSL_ResourceAction__VariableAssignment_0_0");
					put(grammarAccess.getDSL_ResourceActionAccess().getRefAssignment_1(), "rule__DSL_ResourceAction__RefAssignment_1");
					put(grammarAccess.getDSL_ResourceActionAccess().getActiontypeAssignment_3(), "rule__DSL_ResourceAction__ActiontypeAssignment_3");
					put(grammarAccess.getDSL_ResourceActionAccess().getListParamAssignment_5(), "rule__DSL_ResourceAction__ListParamAssignment_5");
					put(grammarAccess.getDSL_ListParamAccess().getParamAssignment_0(), "rule__DSL_ListParam__ParamAssignment_0");
					put(grammarAccess.getDSL_ListParamAccess().getParamAssignment_1_1(), "rule__DSL_ListParam__ParamAssignment_1_1");
					put(grammarAccess.getDSL_Expression_OrAccess().getRightAssignment_1_2(), "rule__DSL_Expression_Or__RightAssignment_1_2");
					put(grammarAccess.getDSL_Expression_AndAccess().getRightAssignment_1_2(), "rule__DSL_Expression_And__RightAssignment_1_2");
					put(grammarAccess.getDSL_Expression_DiffEqualAccess().getRightAssignment_1_0_2(), "rule__DSL_Expression_DiffEqual__RightAssignment_1_0_2");
					put(grammarAccess.getDSL_Expression_DiffEqualAccess().getRightAssignment_1_1_2(), "rule__DSL_Expression_DiffEqual__RightAssignment_1_1_2");
					put(grammarAccess.getDSL_Expression_CompareAccess().getRightAssignment_1_0_2(), "rule__DSL_Expression_Compare__RightAssignment_1_0_2");
					put(grammarAccess.getDSL_Expression_CompareAccess().getRightAssignment_1_1_2(), "rule__DSL_Expression_Compare__RightAssignment_1_1_2");
					put(grammarAccess.getDSL_Expression_CompareAccess().getRightAssignment_1_2_2(), "rule__DSL_Expression_Compare__RightAssignment_1_2_2");
					put(grammarAccess.getDSL_Expression_CompareAccess().getRightAssignment_1_3_2(), "rule__DSL_Expression_Compare__RightAssignment_1_3_2");
					put(grammarAccess.getDSL_Expression_PlusMinusAccess().getRightAssignment_1_0_2(), "rule__DSL_Expression_PlusMinus__RightAssignment_1_0_2");
					put(grammarAccess.getDSL_Expression_PlusMinusAccess().getRightAssignment_1_1_2(), "rule__DSL_Expression_PlusMinus__RightAssignment_1_1_2");
					put(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getRightAssignment_1_0_2(), "rule__DSL_Expression_MultiplicationDivision__RightAssignment_1_0_2");
					put(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getRightAssignment_1_1_2(), "rule__DSL_Expression_MultiplicationDivision__RightAssignment_1_1_2");
					put(grammarAccess.getDSL_Expression_MultiplicationDivisionAccess().getRightAssignment_1_2_2(), "rule__DSL_Expression_MultiplicationDivision__RightAssignment_1_2_2");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getValueAssignment_0_1(), "rule__DSL_Expression_Unary__ValueAssignment_0_1");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getValueAssignment_1_1(), "rule__DSL_Expression_Unary__ValueAssignment_1_1");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getValueAssignment_2_1(), "rule__DSL_Expression_Unary__ValueAssignment_2_1");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getValueAssignment_3_1(), "rule__DSL_Expression_Unary__ValueAssignment_3_1");
					put(grammarAccess.getDSL_Expression_UnaryAccess().getExpAssignment_5_2(), "rule__DSL_Expression_Unary__ExpAssignment_5_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSensinactParser typedParser = (InternalSensinactParser) parser;
			typedParser.entryRuleSensinact();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SensinactGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SensinactGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
